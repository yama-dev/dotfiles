# :call dein#recache_runtimepath()

# denite.
[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
on_path = '.*'

[[plugins]] # Yank
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'
on_event = 'TextYankPost'

# language server.
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'vim-scripts/renamer.vim'

# Syntax.
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css','scss','sass','less']

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'alampros/vim-styled-jsx'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'moll/vim-node'
on_ft = ['javascript']

[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
  autocmd FileType vue syntax sync fromstart
  let g:vue_pre_processors = ['pug', 'scss']
'''

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
  let g:markdown_fenced_languages = ['html', 'css', 'scss', 'javascript', 'python', 'bash=sh', 'php']
  let g:markdown_syntax_conceal = 0
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'vim-jp/cpp-vim'

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'

[[plugins]]
repo = 'nelsyeung/twig.vim'

[[plugins]]
repo = 'danishprakash/vim-docker'

# Snippet.
[[plugins]]
repo = 'honza/vim-snippets'

# [[plugins]]
# repo = 'yama-dev/neosnippet-frontend-snippets'

# StatusLine.
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " Smarter tab line.
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#default#layout = [
    \ [ 'z', 'y', 'x' ],
    \ [ 'c', 'b', 'a', 'error', 'warning']
    \ ]
'''

# HTML.
[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_leader_key='<C-e>'
  let g:user_emmet_settings={"variables":{"lang":"ja"}}
'''

[[plugins]]
repo = 'alvan/vim-closetag'


[[plugins]]
repo = 'tikhomirov/vim-glsl'

# Git.
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

# toml.
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
hook_add = '''
  autocmd BufRead,BufNewFile,BufReadPre *.toml set filetype=toml
'''

# toml.
[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'
hook_add = '''
  autocmd BufRead,BufNewFile *.slim setfiletype slim
'''

# Format.
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  nmap ga <Plug>(EasyAlign)
  xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  " xmap <C-j> <Plug>(textmanip-move-down)
  " xmap <C-k> <Plug>(textmanip-move-up)
  " xmap <C-h> <Plug>(textmanip-move-left)
  " xmap <C-l> <Plug>(textmanip-move-right)

  " use allow key to force replace movement
  xmap  <Up>     <Plug>(textmanip-move-up-r)
  xmap  <Down>   <Plug>(textmanip-move-down-r)
  xmap  <Left>   <Plug>(textmanip-move-left-r)
  xmap  <Right>  <Plug>(textmanip-move-right-r)
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
hook_add = '''
  let g:vimproc#download_windows_dll = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \ 'runner'    : 'vimproc',
  \ 'runner/vimproc/updatetime' : 60,
  \ 'outputter' : 'error',
  \ 'outputter/error/success' : 'buffer',
  \ 'outputter/error/error'   : 'quickfix',
  \ 'outputter/buffer/split'  : ':rightbelow 10sp',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ }
autocmd FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

# Util.
[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  let g:multi_cursor_use_default_mapping=0

  let g:multi_cursor_start_word_key      = '<C-n>'
  let g:multi_cursor_select_all_word_key = '<A-n>'
  let g:multi_cursor_next_key            = '<C-n>'
  let g:multi_cursor_prev_key            = '<C-p>'
  let g:multi_cursor_skip_key            = '<C-x>'
  let g:multi_cursor_quit_key            = '<Esc>'
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  noremap <C-/><C-/> :TComment<CR>
'''

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  " mapping
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  " clear status
  nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
  " statusline
  set statusline=%{anzu#search_status()}
'''

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  " mapping
  nmap - <Plug>(choosewin)
  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1
'''

# colorscheme.
[[plugins]]
repo = 'Haron-Prime/Antares'
hook_add = '''
au MyAutoCmd VimEnter * nested colorscheme Antares
'''

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
"  au MyAutoCmd VimEnter * nested colorscheme tender
'''

[[plugins]]
repo = 'vim-scripts/xoria256.vim'
hook_add = '''
"  au MyAutoCmd VimEnter * nested colorscheme xoria256
'''

[[plugins]]
repo = 'zaki/zazen'
hook_add = '''
"  au MyAutoCmd VimEnter * nested colorscheme zazen
'''

[[plugins]]
repo = 'danishprakash/vim-yami'
hook_add = '''
"  au MyAutoCmd VimEnter * nested colorscheme yami
'''
