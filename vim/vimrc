scriptencoding utf-8

" Import KaoriYa-vimrc
source $VIM/vimrc_kaoriya.vim

let mapleader = "\<Space>"

"--------------------------------------------------
" Functions.

" Output message.
command! -nargs=0 EchoMessage call EchoMessage()
function! EchoMessage()
  put =execute('messages')
endfunction

" Detect env windows.
command! -nargs=0 IsWindows call IsWindows()
let s:is_windows = has('win32') || has('win64')
function! IsWindows()
  return s:is_windows
endfunction

" Toggle Fullscreen.
command! -nargs=0 ToggleFullScreen call ToggleFullScreen()
function! ToggleFullScreen()
  if g:GuiWindowMaximized == 0
    call GuiWindowMaximized(1)
  else
    call GuiWindowMaximized(0)
  endif
endfunction

"--------------------------------------------------
" Settings.

set shellslash
set backup
set backupdir=~/.vim/
set noswapfile
set noundofile

" Search and Replace.
set hlsearch
set ignorecase
set smartcase
set wrapscan
set incsearch
if has('nvim')
  set inccommand=split
endif

" Tabs.
set tabstop=2
set shiftwidth=2
set softtabstop=0
set expandtab
set smarttab
set shiftround

" Indent.
set autoindent
set smartindent

" Window size at startup.
set columns=200
set lines=50

" Line Number.
set number

" Command line.
set cmdheight=3
set wildmenu
set wildmode=list:longest,list:full
set wildchar=<tab>
set wildignore+=.git/*,.svn/*,.DS_Store,*.swp
set wildignore+=node_modules/*

" Format option.
set formatoptions+=mM

" Mouse
set mouse=a
set mousefocus

" Encoding.
set encoding=utf-8
set fileencoding=utf-8

" Backup.
set backup
set backupdir=~/.nvim/

" Set cd.
if has('nvim')
  set autochdir
endif

" Move cursor to move.
set whichwrap=b,s,h,l,<,>,[,]

" clip board.
if has('nvim')
  set clipboard+=unnamedplus
endif

" For IME.
set ambiwidth=auto

" Set Fold.
set foldmethod=manual   

" Set Syntax.
set conceallevel=0
let g:vim_json_syntax_conceal = 0
set synmaxcol=500
autocmd FileType html,markdown set synmaxcol=250

" Display current line.
set cursorline

" set list
set listchars=tab:>-,extends:<,trail:-,eol:<
" set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

set encoding=utf-8
set fileencoding=utf-8
"set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8

" Set Viminfo.
set viminfo='20,f1,<500,s100,h,%
set viminfo+=n~/.vim/viminfo

"---------------------------------------------------------------------------
" NeoBundle
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif
call neobundle#begin(expand('~/.vim/bundle'))
"neobundleの設定
NeoBundleFetch 'Shougo/neobundle.vim'
" vim-indent-guides
NeoBundle 'nathanaelkane/vim-indent-guides'
" ステータスラインのカスタマイズ
NeoBundle 'itchyny/lightline.vim'
" Unit.vim
NeoBundle 'Shougo/unite.vim'
" Emmetプラグイン
NeoBundle 'mattn/emmet-vim'
" vimfiler
NeoBundle 'Shougo/vimfiler.vim'
" grep
NeoBundle 'grep.vim'
" Antares
NeoBundle 'Haron-Prime/Antares'
" vim-textmanip
NeoBundle 't9md/vim-textmanip'
" neocomplete
NeoBundle 'Shougo/neocomplete'
" neocomplete-php
NeoBundle 'violetyk/neocomplete-php.vim'
" neosnippet
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'yama-dev/neosnippet-frontend-snippets'
" vim-multiple-cursors
NeoBundle 'terryma/vim-multiple-cursors'
" editorconfig-vim
NeoBundle 'editorconfig/editorconfig-vim'
" Aling
NeoBundle 'Align'
" Quickrun
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'tyru/open-browser.vim'
" tcomment_vim
NeoBundle 'tomtom/tcomment_vim'
" Javascript Syntax
NeoBundle 'othree/yajs.vim'
" QFixHowm
NeoBundle 'fuenor/qfixhowm'
" calendar.vim
NeoBundle 'itchyny/calendar.vim'
" matchit.vim
NeoBundle 'tmhedberg/matchit'
" qfreplace
NeoBundle 'thinca/vim-qfreplace'
" zoom.vim
NeoBundle 'vim-scripts/zoom.vim'
" vim-fugitive
NeoBundle 'tpope/vim-fugitive'
" vim-markdown
NeoBundle 'plasticboy/vim-markdown'
" vim-twig
NeoBundle 'lumiliet/vim-twig'
" unite-outline
NeoBundle 'Shougo/unite-outline'
" surround.vim
NeoBundle 'surround.vim'
" matchit
NeoBundle 'vim-scripts/matchit.zip'
" renamer.vim
NeoBundle 'vim-scripts/renamer.vim'
" vim-toml
NeoBundle 'cespare/vim-toml'
" vim-json
NeoBundle 'elzr/vim-json'
" Vuejs
NeoBundle 'posva/vim-vue'

call neobundle#end()
NeoBundleCheck

" colorscheme.
colorscheme Antares

syntax on

" Vuejs
autocmd FileType vue syntax sync fromstart

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=1
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#0f0f0f ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#171717 ctermbg=darkgray
let g:indent_guides_guide_size = 2
filetype plugin indent on

" line_heightlight
hi LineNr ctermbg=2 ctermfg=2
hi CursorLineNr ctermbg=4 ctermfg=0
set cursorline
hi clear CursorLine

"Emmetプラグイン
let g:user_emmet_leader_key='<C-e>'
let g:user_emmet_settings={"variables":{"lang":"ja"}} "options -> https://github.com/emmetio/emmet/blob/master/lib/snippets.json
autocmd FileType html,css EmmetInstall
autocmd FileType html imap <buffer><expr><C-e>
  \ emmet#isExpandable() ? "\<plug>(emmet-expand-abbr)" : "\<C-e>"

"vimfilerの設定
let g:vimfiler_as_default_explorer=1
let g:vimfiler_safe_mode_by_default=0
let g:vimfiler_enable_auto_cd=1
"オプション -simple
noremap <silent> <Space>f :<C-u>VimFilerBufferDir -split -winwidth=48 -toggle -no-quit<CR>

" Unit.vimの設定
" 入力モードで開始する
let g:unite_enable_start_insert=1
" バッファ一覧
noremap <C-p> :Unite buffer<CR>
" ファイル一覧
noremap <C-n> :Unite -buffer-name=file file<CR>
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
"" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')

" vim-textmanipの設定
"source copy next
xmap <M-d> <Plug>(textmanip-duplicate-down)
nmap <M-d> <Plug>(textmanip-duplicate-down)
xmap <M-D> <Plug>(textmanip-duplicate-up)
nmap <M-D> <Plug>(textmanip-duplicate-up)
"source copy bottom
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
nmap <F10> <Plug>(textmanip-toggle-mode)
xmap <F10> <Plug>(textmanip-toggle-mode)

" neocompleteの設定
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 3
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#max_keyword_width = 10000
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
let g:neocomplete#keyword_patterns._ = '\h\w*'
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType objc setlocal omnifunc=
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
set re=0
let g:neocomplete#data_directory = $HOME . '/.vim/cache/neocomplete'

" neocomplete-phpの設定
let g:neocomplete_php_locale = 'ja'

" neosnippetの設定
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

" vim-multiple-cursorsの設定
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-d>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" neocompleteとのコンフリクト解消
function! Multiple_cursors_before()
  exe 'NeoCompleteLock'
endfunction
function! Multiple_cursors_after()
  exe 'NeoCompleteUnlock'
endfunction

" QFixHowm
" キーマップリーダー
let QFixHowm_Key = 'g'
" howm_dirはファイルを保存したいディレクトリを設定
let howm_dir             = 'c:/howm'
let howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.txt'
let howm_fileencoding    = 'utf-8'
let howm_fileformat      = 'dos'

" Markdown Syntax, vim-markdown
let g:vim_markdown_folding_level = 6
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_math = 1

" unite-outline
nnoremap <silent> <C-o> :<C-u>Unite -vertical -no-quit -winwidth=30 outline<CR><ESC>

"---------------------------------------------------------------------------
"各部ハイライトの設定
highlight Normal guibg=grey90
highlight Cursor guibg=Green guifg=NONE
highlight lCursor guibg=Cyan guifg=NONE
highlight NonText guibg=grey80
highlight Constant gui=NONE guibg=grey95
highlight Special gui=NONE guibg=grey95

" lightline.vimの設定
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'readonly', 'filename', 'modified', 'git' ] ]
  \ },
  \ 'component': {
  \   'git': '%{fugitive#statusline()}'
  \ },
  \ }

" quickrun
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config = {
  \ 'markdown': {
  \   'outputter': 'browser',
  \ },
  \ 'markdown/pandoc': {
  \   'command': 'pandoc',
  \   'exec': '%c --from=markdown --to=html %o %s %a',
  \ },
  \ 'markdown/markdown': {
  \   'command': 'markdown',
  \ },
  \ '_': {
  \   'runner' : 'job',
  \   'outputter' : 'error',
  \   'outputter/error/success' : 'buffer',
  \   'outputter/error/error'   : 'quickfix',
  \   'outputter/buffer/split'  : ':botright 8',
  \   'outputter/buffer/close_on_empty' : 1,
  \   'hook/time/enable': '1',
  \ },
  \ }

"--------------------------------------------------
" Settings key-bind.

" Highlight cancellation by pressing Esc twice.
nmap <ESC><ESC> ;nohlsearch<CR><ESC>

" file type setting
augroup filetypes
  autocmd!
  autocmd BufRead,BufNewFile,BufReadPre *.txt set filetype=markdown
  autocmd BufRead,BufNewFile,BufReadPre *.es set filetype=javascript
  autocmd BufRead,BufNewFile,BufReadPre *.es6 set filetype=javascript
  autocmd BufRead,BufNewFile,BufReadPre *.ejs set filetype=html
  autocmd BufRead,BufNewFile,BufReadPre *.scss set filetype=scss.css
  autocmd BufRead,BufNewFile,BufReadPre *.toml set filetype=toml
augroup END

" change tabsize.
map <F9> <C-w>10<
map <F10> <C-w>10>

" change tabsize.
map <F11> :ToggleFullScreen<CR>

" Settings For Search and Replace.
nnoremap / /\v
nnoremap <C-g> :vim **/* \| cw
nnoremap <C-g>f :/\( \\| \)
nnoremap <C-g>js :vim **/*.es6 \| cw
nnoremap <C-g>html :vim **/*.html \| cw
nnoremap <C-g>css :vim **/*.scss \| cw
nnoremap <C-h> :%s;;;gc
nnoremap <Leader>z /\zs\ze.*

" Grep.
autocmd QuickFixCmdPost *grep* cwindow

" Open new tab.
noremap <Leader>t :tabnew<CR>
nnoremap <Tab> gt
nnoremap <S-Tab> gT

" move cursor line.
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

nnoremap <C-f> 20j
nnoremap <C-b> 20k

noremap <C-d> <C-d>zz
noremap <C-u> <C-u>zz

nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

" Not register overwrite.
xnoremap s "_s
nnoremap dd "_dd

" Add Line.
nnoremap <Leader>al  :%s/$/\r/gc<CR>
vnoremap <Leader>al  :s/$/\r/gc<CR>

" Delete Line.
nnoremap <Leader>dl  :%s/^$\n//gc<CR>
vnoremap <Leader>dl  :s/^$\n//gc<CR>

" Delete Space.
nnoremap <Leader>ds  :%s/\s\+//gc<CR>
vnoremap <Leader>ds  :s/\s\+//gc<CR>

"--------------------------------------------------
" Settings For Terminal.

" Instantly insert mode.
if has('nvim')
  autocmd WinEnter * if &buftype ==# 'terminal' | startinsert | endif
else
  autocmd WinEnter * if &buftype ==# 'terminal' | normal i | endif
endif

" Paste register.
if has('nvim')
  tnoremap <expr> <A-v> '<C-\><C-N>"'.nr2char(getchar()).'pi'
endif

"--------------------------------------------------
" Settings For HTML.

" Append br tag.
autocmd FileType xml,html inoremap <C-CR> <br>
" Append close tag.
autocmd Filetype xml,html inoremap <buffer> </ </<C-x><C-o>

"--------------------------------------------------
" Settings Other.

" Vim :w Use HHKB
map ; :

