scriptencoding utf-8

" Require KaoriYa-vimrc
source $VIM/vimrc_kaoriya.vim

"---------------------------------------------------------------------------
" Make command line two lines high
set ch=2
" Hide the mouse when typing text
set mousehide
let c_comment_strings=1
if !exists("syntax_on")
  syntax on
endif
set nocompatible
" 起動時のウインドウサイズ
set columns=110
set lines=63
" 検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
" 大文字小文字の両方が含まれている場合は大文字小文字を区別
set smartcase
" 検索時にハイライト表示
set hlsearch
" タブの画面上での幅
set tabstop=2
" インテリジェンスなタブ入力
set smarttab
" タブをスペースに展開しない (expandtab:展開する) noexpandtab
set expandtab
" 自動的にインデントする (noautoindent:インデントしない)
set autoindent
" 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set nowrapscan
" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu
set wildmode=list:longest,list:full
set wildchar=<tab>
set wildignore+=.git,.svn
set wildignore+=.DS_Store
" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM
" 行番号を非表示 (number:表示)
set number
" ルーラーを表示 (noruler:非表示)
set ruler
" タブや改行を表示 (list:表示)
set nolist
" どの文字でタブや改行を表示するかを設定
set listchars=tab:>-,extends:<,trail:-,eol:<
" 長い行を折り返して表示 (nowrap:折り返さない)
set wrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=2
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title
" Vimが挿入するインデントの幅
set shiftwidth=2
"文字エンコードの動判別
set encoding=utf-8
set fileencoding=utf-8
"set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
" バックアップファイルを作成しない (次行の先頭の " を削除すれば有効になる)
set backup
set backupdir=~/.vim/
" スワップファイルは使わない
set noswapfile
" アンドゥファイルは使わない
set noundofile
" vimvinfoの設定
set viminfo='20,f1,<500,s100,h,%
set viminfo+=n~/.vim/viminfo
" メニューバー、ツールバーの表示設定(GUI)
set guioptions-=m
set guioptions-=T
nnoremap <C-m>o :set guioptions+=mT<CR>
nnoremap <C-m>c :set guioptions-=mT<CR>
" ハイライトの設定
set synmaxcol=500
autocmd FileType html,markdown set synmaxcol=200

"---------------------------------------------------------------------------
" NeoBundle
if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif
call neobundle#begin(expand('~/.vim/bundle'))
"neobundleの設定
NeoBundleFetch 'Shougo/neobundle.vim'
" vim-indent-guides
NeoBundle 'nathanaelkane/vim-indent-guides'
" ステータスラインのカスタマイズ
NeoBundle 'itchyny/lightline.vim'
" Unit.vim
NeoBundle 'Shougo/unite.vim'
" Emmetプラグイン
NeoBundle 'mattn/emmet-vim'
" vimfiler
NeoBundle 'Shougo/vimfiler.vim'
" vimshell
NeoBundle 'Shougo/vimshell'
" grep
NeoBundle 'grep.vim'
" vim-textmanip
NeoBundle 't9md/vim-textmanip'
" neocomplete
NeoBundle 'Shougo/neocomplete'
" neocomplete-php
NeoBundle 'violetyk/neocomplete-php.vim'
" neosnippet
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'yama-dev/neosnippet-frontend-snippets'
" vim-multiple-cursors
NeoBundle 'terryma/vim-multiple-cursors'
" editorconfig-vim
NeoBundle 'editorconfig/editorconfig-vim'
" tagbar
NeoBundle 'majutsushi/tagbar'
" Aling
NeoBundle 'Align'
" Quickrun
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'tyru/open-browser.vim'
" tcomment_vim
NeoBundle 'tomtom/tcomment_vim'
" Javascript Syntax
NeoBundle 'othree/yajs.vim'
" QFixHowm
NeoBundle 'fuenor/qfixhowm'
" calendar.vim
NeoBundle 'itchyny/calendar.vim'
" matchit.vim
NeoBundle 'tmhedberg/matchit'
" qfreplace
NeoBundle 'thinca/vim-qfreplace'
" zoom.vim
NeoBundle 'vim-scripts/zoom.vim'
" vim-fugitive
NeoBundle 'tpope/vim-fugitive'
" vim-markdown
NeoBundle 'plasticboy/vim-markdown'
" vim-twig
NeoBundle 'lumiliet/vim-twig'
" unite-outline
NeoBundle 'Shougo/unite-outline'
" surround.vim
NeoBundle 'surround.vim'
" matchit
NeoBundle 'vim-scripts/matchit.zip'
" renamer.vim
NeoBundle 'vim-scripts/renamer.vim'
" vim-toml
NeoBundle 'cespare/vim-toml'

call neobundle#end()
NeoBundleCheck

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=1
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#0f0f0f ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#171717 ctermbg=darkgray
let g:indent_guides_guide_size = 2
filetype plugin indent on

" line_heightlight
hi LineNr ctermbg=2 ctermfg=2
hi CursorLineNr ctermbg=4 ctermfg=0
set cursorline
hi clear CursorLine

"Emmetプラグイン
let g:user_emmet_leader_key='<C-e>'
let g:user_emmet_settings={"variables":{"lang":"ja"}} "options -> https://github.com/emmetio/emmet/blob/master/lib/snippets.json
autocmd FileType html,css EmmetInstall
autocmd FileType html imap <buffer><expr><C-e>
  \ emmet#isExpandable() ? "\<plug>(emmet-expand-abbr)" : "\<C-e>"

"vimfilerの設定
let g:vimfiler_as_default_explorer=1
let g:vimfiler_safe_mode_by_default=0
let g:vimfiler_enable_auto_cd=1
"オプション -simple
noremap <silent> <Space>f :<C-u>VimFilerBufferDir -split -winwidth=48 -toggle -no-quit<CR>

" Unit.vimの設定
" 入力モードで開始する
let g:unite_enable_start_insert=1
" バッファ一覧
noremap <C-p> :Unite buffer<CR>
" ファイル一覧
noremap <C-n> :Unite -buffer-name=file file<CR>
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
"" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')

" vimshellの設定
nnoremap <Space>v :vs<CR>:<C-u>VimShell<CR>
nnoremap <Space>s :SyntasticCheck<CR>:Errors<CR>

" grepの設定
let Grep_Skip_Dirs='.svn .git'  "無視するディレクトリ
let Grep_Default_Options='-I'   "バイナルファイルがgrepしない
let Grep_Skip_Files='*.bak *~'  "バックアップファイルを無視する

" syntasticの設定
"NeoBundle 'scrooloose/syntastic'
"let g:syntastic_javascript_checker='eslint' "let g:syntastic_javascript_checkers = ['eslint']
"let g:syntastic_check_on_open=0
"let g:syntastic_check_on_save=1

" vim-textmanipの設定
"source copy next
xmap <M-d> <Plug>(textmanip-duplicate-down)
nmap <M-d> <Plug>(textmanip-duplicate-down)
xmap <M-D> <Plug>(textmanip-duplicate-up)
nmap <M-D> <Plug>(textmanip-duplicate-up)
"source copy bottom
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
nmap <F10> <Plug>(textmanip-toggle-mode)
xmap <F10> <Plug>(textmanip-toggle-mode)

" neocompleteの設定
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 3
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#max_keyword_width = 10000
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
  \ }
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
let g:neocomplete#keyword_patterns._ = '\h\w*'
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType objc setlocal omnifunc=
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
set re=0
let g:neocomplete#data_directory = $HOME . '/.vim/cache/neocomplete'

" neocomplete-phpの設定
let g:neocomplete_php_locale = 'ja'

" neosnippetの設定
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" vim-multiple-cursorsの設定
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-d>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" neocompleteとのコンフリクト解消
function! Multiple_cursors_before()
  exe 'NeoCompleteLock'
endfunction
function! Multiple_cursors_after()
  exe 'NeoCompleteUnlock'
endfunction

" tagbarの設定
" let g:tagbar_width = 30
" let g:tagbar_autoshowtag = 1
" set statusline=%F%m%r%h%w\%=%{tagbar#currenttag('[%s]','')}\[Pos=%v,%l]\[Len=%L]
" nnoremap <F3> :<C-u>tab stj <C-R>=expand('<cword>')<CR><CR>

" Alignの設定
let g:Align_xstrlen = 3
map <Space>i :Align<CR>

" tcomment_vim
nnoremap <Space>/ :TComment<CR>

" Filetype.
autocmd BufRead,BufNewFile *.txt setfiletype markdown
autocmd BufRead,BufNewFile *.es6 setfiletype javascript
autocmd BufRead,BufNewFile *.ejs setfiletype html
autocmd BufRead,BufNewFile,BufReadPre *.toml set filetype=toml

" QFixHowm
" キーマップリーダー
let QFixHowm_Key = 'g'
" howm_dirはファイルを保存したいディレクトリを設定
let howm_dir             = 'c:/howm'
let howm_filename        = '%Y/%m/%Y-%m-%d-%H%M%S.txt'
let howm_fileencoding    = 'utf-8'
let howm_fileformat      = 'dos'

"Vim :w Use HHKB
map ; :

" Markdown Syntax, vim-markdown
let g:vim_markdown_folding_level = 6
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_math = 1

" unite-outline
nnoremap <silent> <C-o> :<C-u>Unite -vertical -no-quit -winwidth=30 outline<CR><ESC>

"---------------------------------------------------------------------------
"各部ハイライトの設定
highlight Normal guibg=grey90
highlight Cursor guibg=Green guifg=NONE
highlight lCursor guibg=Cyan guifg=NONE
highlight NonText guibg=grey80
highlight Constant gui=NONE guibg=grey95
highlight Special gui=NONE guibg=grey95

" 全角スペースの表示
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
endfunction
if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme * call ZenkakuSpace()
    autocmd VimEnter,WinEnter,BufRead * let w:m1=matchadd('ZenkakuSpace','　')
  augroup END
  call ZenkakuSpace()
endif

" カーソルを行頭、行末で止まらないようにする
set whichwrap=b,s,h,l,<,>,[,]

" HTMLでの閉じタグの設定
autocmd FileType html inoremap <silent> <buffer> </ </<C-x><C-o>

"全選択する
noremap <C-a> ggVG

"新しいタブを開く
noremap <Space>t :tabnew<CR>

"行移動の設定
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

"誤操作の防止
nnoremap ZQ <Nop>

"検索、置換
nnoremap <C-g> :vim  **/* \| cw
nnoremap <C-g>f :/\( \\| \)
nnoremap <C-g>js :vim  **/*.es6 \| cw
nnoremap <C-g>html :vim  **/*.html \| cw
nnoremap <C-g>css :vim  **/*.scss \| cw
nnoremap <C-h> :%s;;;gc
nnoremap <Space>z /\zs\ze.*

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>
nnoremap / /\v

" ハイライトの解除
nnoremap <ESC><ESC> :noh<CR>

" lightline.vimの設定
let g:lightline = {
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'readonly', 'filename', 'modified', 'git' ] ]
  \ },
  \ 'component': {
  \   'git': '%{fugitive#statusline()}'
  \ },
  \ }

" quickrun
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config = {
  \ 'markdown': {
  \   'outputter': 'browser',
  \ },
  \ 'markdown/pandoc': {
  \   'command': 'pandoc',
  \   'exec': '%c --from=markdown --to=html %o %s %a',
  \ },
  \ 'markdown/markdown': {
  \   'command': 'markdown',
  \ },
  \ '_': {
  \   'runner' : 'job',
  \   'outputter' : 'error',
  \   'outputter/error/success' : 'buffer',
  \   'outputter/error/error'   : 'quickfix',
  \   'outputter/buffer/split'  : ':botright 8',
  \   'outputter/buffer/close_on_empty' : 1,
  \   'hook/time/enable': '1',
  \ },
  \ }

" HTMLで改行タグを簡単に挿入する設定
autocmd FileType html inoremap <C-CR> <br>

